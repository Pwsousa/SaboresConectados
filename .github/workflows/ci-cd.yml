name: CI/CD Pipeline - Sabores Conectados

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: saboresconectados

defaults:
  run:
    working-directory: .

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: List repository structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Checking modules:"
        ls -la Cardapio/ || echo "Cardapio not found"
        ls -la Pedidos/ || echo "Pedidos not found"
        ls -la Pagamentos/ || echo "Pagamentos not found"
        ls -la Gateway/ || echo "Gateway not found"
        ls -la Server/server/ || echo "Server/server not found"
        ls -la integration-test/ || echo "integration-test not found"

    - name: Validate Maven project structure
      run: mvn validate

    - name: Run unit tests
      run: |
        # Compile each module individually to isolate issues
        mvn clean compile -pl Cardapio -am
        mvn clean compile -pl Pedidos -am
        mvn clean compile -pl Pagamentos -am
        mvn clean compile -pl Gateway -am
        mvn clean compile -pl Server/server -am
        
        # Run tests for each module
        mvn test -pl Cardapio -Dspring.profiles.active=test
        mvn test -pl Pedidos -Dspring.profiles.active=test
        mvn test -pl Pagamentos -Dspring.profiles.active=test
        mvn test -pl Gateway -Dspring.profiles.active=test
        mvn test -pl Server/server -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_db?createDatabaseIfNotExist=true
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: root

    - name: Run integration tests
      run: |
        # Build integration-test module with dependencies
        mvn clean verify -pl integration-test -am -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_db?createDatabaseIfNotExist=true
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: root

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        include:
          - service: eureka-server
            context: Server
            dockerfile: Server/Dockerfile
          - service: gateway
            context: Gateway
            dockerfile: Gateway/Dockerfile
          - service: cardapio-service
            context: Cardapio
            dockerfile: Cardapio/Dockerfile
          - service: pedidos-service
            context: Pedidos
            dockerfile: Pedidos/Dockerfile
          - service: pagamentos-service
            context: Pagamentos
            dockerfile: Pagamentos/Dockerfile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build Java modules
      run: |
        echo "Building module for ${{ matrix.service }}"
        if [ "${{ matrix.service }}" = "eureka-server" ]; then
          mvn clean package -pl Server/server -am -DskipTests
        elif [ "${{ matrix.service }}" = "gateway" ]; then
          mvn clean package -pl Gateway -am -DskipTests
        elif [ "${{ matrix.service }}" = "cardapio-service" ]; then
          mvn clean package -pl Cardapio -am -DskipTests
        elif [ "${{ matrix.service }}" = "pedidos-service" ]; then
          mvn clean package -pl Pedidos -am -DskipTests
        elif [ "${{ matrix.service }}" = "pagamentos-service" ]; then
          mvn clean package -pl Pagamentos -am -DskipTests
        fi

    - name: Verify Dockerfile exists
      run: |
        echo "Checking Dockerfile for ${{ matrix.service }}"
        echo "Context: ${{ matrix.context }}"
        echo "Dockerfile: ${{ matrix.dockerfile }}"
        ls -la ${{ matrix.context }}/
        if [ -f "${{ matrix.dockerfile }}" ]; then
          echo "✅ Dockerfile found"
        else
          echo "❌ Dockerfile not found"
          exit 1
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aqui você pode adicionar comandos para deploy no ambiente de staging
        # Por exemplo, usando kubectl, docker-compose, ou outros orquestradores

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        
