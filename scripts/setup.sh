#!/bin/bash

# Script de Setup - Sabores Conectados
# Este script configura o ambiente de desenvolvimento e produ√ß√£o

set -e

echo "üöÄ Configurando ambiente Sabores Conectados..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se o comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${GREEN} $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}  $1${NC}"
}

print_error() {
    echo -e "${RED} $1${NC}"
}

# Verificar depend√™ncias
echo " Verificando depend√™ncias..."

if ! command_exists docker; then
    print_error "Docker n√£o est√° instalado. Instale o Docker primeiro."
    exit 1
fi
print_status "Docker encontrado"

if ! command_exists docker-compose; then
    print_error "Docker Compose n√£o est√° instalado. Instale o Docker Compose primeiro."
    exit 1
fi
print_status "Docker Compose encontrado"

if ! command_exists mvn; then
    print_warning "Maven n√£o encontrado. Algumas funcionalidades podem n√£o funcionar."
fi

if ! command_exists kubectl; then
    print_warning "kubectl n√£o encontrado. Deploy Kubernetes n√£o estar√° dispon√≠vel."
fi

# Criar diret√≥rios necess√°rios
echo " Criando diret√≥rios..."
mkdir -p config/prometheus/rules
mkdir -p config/logstash
mkdir -p config/mysql/staging
mkdir -p config/mysql/prod
mkdir -p backups
mkdir -p logs

print_status "Diret√≥rios criados"

# Configurar permiss√µes
echo " Configurando permiss√µes..."
chmod +x scripts/deploy.sh
chmod +x setup.sh

print_status "Permiss√µes configuradas"

# Verificar se arquivo de configura√ß√£o de produ√ß√£o existe
if [ ! -f "config/prod.env" ]; then
    print_warning "Arquivo config/prod.env n√£o encontrado. Criando template..."
    cp config/prod.env.example config/prod.env 2>/dev/null || echo "Crie o arquivo config/prod.env com suas configura√ß√µes de produ√ß√£o"
fi

# Verificar se secrets do GitHub est√£o configurados
echo " Verificando configura√ß√£o de secrets..."

if [ -z "$DOCKER_USERNAME" ]; then
    print_warning "DOCKER_USERNAME n√£o configurado. Configure no GitHub Secrets ou como vari√°vel de ambiente."
fi

if [ -z "$DOCKER_PASSWORD" ]; then
    print_warning "DOCKER_PASSWORD n√£o configurado. Configure no GitHub Secrets ou como vari√°vel de ambiente."
fi

# Build das imagens Docker
echo " Fazendo build das imagens Docker..."

# Build do Eureka Server
echo "Building Eureka Server..."
docker build -t saboresconectados/eureka-server:latest ./server/Server

# Build do Gateway
echo "Building Gateway..."
docker build -t saboresconectados/gateway:latest ./Gateway/Gateway

# Build do Cardapio Service
echo "Building Cardapio Service..."
docker build -t saboresconectados/cardapio-service:latest ./cardapio/Cardapio

# Build do Pedidos Service
echo "Building Pedidos Service..."
docker build -t saboresconectados/pedidos-service:latest ./pedidos

# Build do Pagamentos Service
echo "Building Pagamentos Service..."
docker build -t saboresconectados/pagamentos-service:latest ./pagamentos/Pagamentos

# Build do Auth Service
echo "Building Auth Service..."
docker build -t saboresconectados/auth-service:latest ./auth-service

print_status "Imagens Docker constru√≠das"

# Teste de compila√ß√£o
echo "üß™ Testando compila√ß√£o..."

if command_exists mvn; then
    mvn clean compile -q
    print_status "Compila√ß√£o bem-sucedida"
else
    print_warning "Maven n√£o encontrado. Pulando teste de compila√ß√£o."
fi

# Verificar se os servi√ßos podem ser iniciados
echo "üöÄ Testando inicializa√ß√£o dos servi√ßos..."

# Parar containers existentes
docker-compose down 2>/dev/null || true

# Iniciar servi√ßos em background
docker-compose up -d

# Aguardar servi√ßos ficarem prontos
echo " Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar sa√∫de dos servi√ßos
echo "üè• Verificando sa√∫de dos servi√ßos..."

services=("eureka-server:8761" "cardapio-service:8082" "pedidos-service:8083" "pagamentos-service:8081" "gateway:8084" "auth-service:8085")

for service in "${services[@]}"; do
    name=$(echo $service | cut -d: -f1)
    port=$(echo $service | cut -d: -f2)
    
    if curl -f -s http://localhost:$port/actuator/health > /dev/null 2>&1; then
        print_status "$name est√° saud√°vel"
    else
        print_warning "$name n√£o est√° respondendo (pode estar inicializando)"
    fi
done

# Parar servi√ßos de teste
docker-compose down

print_status "Teste de inicializa√ß√£o conclu√≠do"

# Mostrar pr√≥ximos passos
echo ""
echo " Setup conclu√≠do com sucesso!"
echo ""
echo " Pr√≥ximos passos:"
echo "1. Configure os secrets no GitHub (DOCKER_USERNAME, DOCKER_PASSWORD, etc.)"
echo "2. Configure o arquivo config/prod.env com suas senhas de produ√ß√£o"
echo "3. Execute './scripts/deploy.sh staging' para deploy em staging"
echo "4. Execute './scripts/deploy.sh prod' para deploy em produ√ß√£o"
echo ""
echo " Documenta√ß√£o:"
echo "- DEPLOYMENT.md - Documenta√ß√£o completa de deployment"
echo "- README.md - Documenta√ß√£o geral do projeto"
echo ""
echo " URLs importantes:"
echo "- Eureka Dashboard: http://localhost:8761"
echo "- Gateway: http://localhost:8084"
echo "- Grafana: http://localhost:3000"
echo "- Prometheus: http://localhost:9090"
echo "- Kibana: http://localhost:5601"
echo ""
echo "  Comandos √∫teis:"
echo "- Iniciar servi√ßos: docker-compose up -d"
echo "- Parar servi√ßos: docker-compose down"
echo "- Ver logs: docker-compose logs [service]"
echo "- Deploy: ./scripts/deploy.sh [environment] [version]"
echo ""
